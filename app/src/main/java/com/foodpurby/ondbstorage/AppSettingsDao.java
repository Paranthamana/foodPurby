package com.foodpurby.ondbstorage;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_SETTINGS".
*/
public class AppSettingsDao extends AbstractDao<AppSettings, Long> {

    public static final String TABLENAME = "APP_SETTINGS";

    /**
     * Properties of entity AppSettings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CityKey = new Property(1, String.class, "cityKey", false, "CITY_KEY");
        public final static Property CityName = new Property(2, String.class, "cityName", false, "CITY_NAME");
        public final static Property AreaKey = new Property(3, String.class, "areaKey", false, "AREA_KEY");
        public final static Property AreaName = new Property(4, String.class, "areaName", false, "AREA_NAME");
        public final static Property GcmTokenKey = new Property(5, String.class, "gcmTokenKey", false, "GCM_TOKEN_KEY");
        public final static Property VibrateOnCartChange = new Property(6, Boolean.class, "vibrateOnCartChange", false, "VIBRATE_ON_CART_CHANGE");
    };


    public AppSettingsDao(DaoConfig config) {
        super(config);
    }
    
    public AppSettingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_SETTINGS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CITY_KEY\" TEXT," + // 1: cityKey
                "\"CITY_NAME\" TEXT," + // 2: cityName
                "\"AREA_KEY\" TEXT," + // 3: areaKey
                "\"AREA_NAME\" TEXT," + // 4: areaName
                "\"GCM_TOKEN_KEY\" TEXT," + // 5: gcmTokenKey
                "\"VIBRATE_ON_CART_CHANGE\" INTEGER);"); // 6: vibrateOnCartChange
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_SETTINGS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppSettings entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cityKey = entity.getCityKey();
        if (cityKey != null) {
            stmt.bindString(2, cityKey);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(3, cityName);
        }
 
        String areaKey = entity.getAreaKey();
        if (areaKey != null) {
            stmt.bindString(4, areaKey);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(5, areaName);
        }
 
        String gcmTokenKey = entity.getGcmTokenKey();
        if (gcmTokenKey != null) {
            stmt.bindString(6, gcmTokenKey);
        }
 
        Boolean vibrateOnCartChange = entity.getVibrateOnCartChange();
        if (vibrateOnCartChange != null) {
            stmt.bindLong(7, vibrateOnCartChange ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppSettings readEntity(Cursor cursor, int offset) {
        AppSettings entity = new AppSettings( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cityKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cityName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // areaName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gcmTokenKey
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // vibrateOnCartChange
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppSettings entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCityKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCityName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreaName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGcmTokenKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVibrateOnCartChange(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AppSettings entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AppSettings entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
