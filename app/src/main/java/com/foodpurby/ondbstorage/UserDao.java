package com.foodpurby.ondbstorage;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserKey = new Property(1, String.class, "userKey", false, "USER_KEY");
        public final static Property UserEMail = new Property(2, String.class, "userEMail", false, "USER_EMAIL");
        public final static Property UserFirstName = new Property(3, String.class, "userFirstName", false, "USER_FIRST_NAME");
        public final static Property UserLastName = new Property(4, String.class, "userLastName", false, "USER_LAST_NAME");
        public final static Property UserMobile = new Property(5, String.class, "userMobile", false, "USER_MOBILE");
        public final static Property UserToken = new Property(6, String.class, "userToken", false, "USER_TOKEN");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_KEY\" TEXT NOT NULL ," + // 1: userKey
                "\"USER_EMAIL\" TEXT NOT NULL ," + // 2: userEMail
                "\"USER_FIRST_NAME\" TEXT NOT NULL ," + // 3: userFirstName
                "\"USER_LAST_NAME\" TEXT NOT NULL ," + // 4: userLastName
                "\"USER_MOBILE\" TEXT NOT NULL ," + // 5: userMobile
                "\"USER_TOKEN\" TEXT NOT NULL );"); // 6: userToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserKey());
        stmt.bindString(3, entity.getUserEMail());
        stmt.bindString(4, entity.getUserFirstName());
        stmt.bindString(5, entity.getUserLastName());
        stmt.bindString(6, entity.getUserMobile());
        stmt.bindString(7, entity.getUserToken());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userKey
            cursor.getString(offset + 2), // userEMail
            cursor.getString(offset + 3), // userFirstName
            cursor.getString(offset + 4), // userLastName
            cursor.getString(offset + 5), // userMobile
            cursor.getString(offset + 6) // userToken
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserKey(cursor.getString(offset + 1));
        entity.setUserEMail(cursor.getString(offset + 2));
        entity.setUserFirstName(cursor.getString(offset + 3));
        entity.setUserLastName(cursor.getString(offset + 4));
        entity.setUserMobile(cursor.getString(offset + 5));
        entity.setUserToken(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
