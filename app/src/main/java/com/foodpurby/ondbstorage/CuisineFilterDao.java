package com.foodpurby.ondbstorage;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUISINE_FILTER".
*/
public class CuisineFilterDao extends AbstractDao<CuisineFilter, Long> {

    public static final String TABLENAME = "CUISINE_FILTER";

    /**
     * Properties of entity CuisineFilter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CuisineKey = new Property(1, String.class, "cuisineKey", false, "CUISINE_KEY");
        public final static Property CuisineName = new Property(2, String.class, "cuisineName", false, "CUISINE_NAME");
        public final static Property SortingNumber = new Property(3, String.class, "sortingNumber", false, "SORTING_NUMBER");
        public final static Property ActiveStatus = new Property(4, Boolean.class, "activeStatus", false, "ACTIVE_STATUS");
    };


    public CuisineFilterDao(DaoConfig config) {
        super(config);
    }
    
    public CuisineFilterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUISINE_FILTER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CUISINE_KEY\" TEXT NOT NULL ," + // 1: cuisineKey
                "\"CUISINE_NAME\" TEXT," + // 2: cuisineName
                "\"SORTING_NUMBER\" TEXT," + // 3: sortingNumber
                "\"ACTIVE_STATUS\" INTEGER);"); // 4: activeStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUISINE_FILTER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CuisineFilter entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCuisineKey());
 
        String cuisineName = entity.getCuisineName();
        if (cuisineName != null) {
            stmt.bindString(3, cuisineName);
        }
 
        String sortingNumber = entity.getSortingNumber();
        if (sortingNumber != null) {
            stmt.bindString(4, sortingNumber);
        }
 
        Boolean activeStatus = entity.getActiveStatus();
        if (activeStatus != null) {
            stmt.bindLong(5, activeStatus ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CuisineFilter readEntity(Cursor cursor, int offset) {
        CuisineFilter entity = new CuisineFilter( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // cuisineKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cuisineName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sortingNumber
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // activeStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CuisineFilter entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCuisineKey(cursor.getString(offset + 1));
        entity.setCuisineName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSortingNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setActiveStatus(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CuisineFilter entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CuisineFilter entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
