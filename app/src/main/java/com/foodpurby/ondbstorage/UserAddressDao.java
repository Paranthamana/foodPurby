package com.foodpurby.ondbstorage;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ADDRESS".
*/
public class UserAddressDao extends AbstractDao<UserAddress, Long> {

    public static final String TABLENAME = "USER_ADDRESS";

    /**
     * Properties of entity UserAddress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserAddressKey = new Property(1, String.class, "userAddressKey", false, "USER_ADDRESS_KEY");
        public final static Property DefaultStatus = new Property(2, Boolean.class, "defaultStatus", false, "DEFAULT_STATUS");
        public final static Property CompanyName = new Property(3, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property FlatNo = new Property(4, String.class, "flatNo", false, "FLAT_NO");
        public final static Property LocationName = new Property(5, String.class, "locationName", false, "LOCATION_NAME");
        public final static Property PostalCode = new Property(6, String.class, "postalCode", false, "POSTAL_CODE");
        public final static Property Landmark = new Property(7, String.class, "landmark", false, "LANDMARK");
        public final static Property DeliveryInstrutions = new Property(8, String.class, "deliveryInstrutions", false, "DELIVERY_INSTRUTIONS");
        public final static Property CityKey = new Property(9, String.class, "cityKey", false, "CITY_KEY");
        public final static Property CityName = new Property(10, String.class, "cityName", false, "CITY_NAME");
        public final static Property AreaKey = new Property(11, String.class, "areaKey", false, "AREA_KEY");
        public final static Property AreaName = new Property(12, String.class, "areaName", false, "AREA_NAME");
        public final static Property Annotation = new Property(13, String.class, "annotation", false, "ANNOTATION");
        public final static Property DeliveryValid = new Property(14, Boolean.class, "deliveryValid", false, "DELIVERY_VALID");
        public final static Property DeleteStatus = new Property(15, Boolean.class, "deleteStatus", false, "DELETE_STATUS");
        public final static Property ActiveStatus = new Property(16, Boolean.class, "activeStatus", false, "ACTIVE_STATUS");
    };


    public UserAddressDao(DaoConfig config) {
        super(config);
    }
    
    public UserAddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ADDRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ADDRESS_KEY\" TEXT NOT NULL ," + // 1: userAddressKey
                "\"DEFAULT_STATUS\" INTEGER," + // 2: defaultStatus
                "\"COMPANY_NAME\" TEXT," + // 3: companyName
                "\"FLAT_NO\" TEXT," + // 4: flatNo
                "\"LOCATION_NAME\" TEXT," + // 5: locationName
                "\"POSTAL_CODE\" TEXT," + // 6: postalCode
                "\"LANDMARK\" TEXT," + // 7: landmark
                "\"DELIVERY_INSTRUTIONS\" TEXT," + // 8: deliveryInstrutions
                "\"CITY_KEY\" TEXT," + // 9: cityKey
                "\"CITY_NAME\" TEXT," + // 10: cityName
                "\"AREA_KEY\" TEXT," + // 11: areaKey
                "\"AREA_NAME\" TEXT," + // 12: areaName
                "\"ANNOTATION\" TEXT," + // 13: annotation
                "\"DELIVERY_VALID\" INTEGER," + // 14: deliveryValid
                "\"DELETE_STATUS\" INTEGER," + // 15: deleteStatus
                "\"ACTIVE_STATUS\" INTEGER);"); // 16: activeStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ADDRESS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserAddress entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserAddressKey());
 
        Boolean defaultStatus = entity.getDefaultStatus();
        if (defaultStatus != null) {
            stmt.bindLong(3, defaultStatus ? 1L: 0L);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(4, companyName);
        }
 
        String flatNo = entity.getFlatNo();
        if (flatNo != null) {
            stmt.bindString(5, flatNo);
        }
 
        String locationName = entity.getLocationName();
        if (locationName != null) {
            stmt.bindString(6, locationName);
        }
 
        String postalCode = entity.getPostalCode();
        if (postalCode != null) {
            stmt.bindString(7, postalCode);
        }
 
        String landmark = entity.getLandmark();
        if (landmark != null) {
            stmt.bindString(8, landmark);
        }
 
        String deliveryInstrutions = entity.getDeliveryInstrutions();
        if (deliveryInstrutions != null) {
            stmt.bindString(9, deliveryInstrutions);
        }
 
        String cityKey = entity.getCityKey();
        if (cityKey != null) {
            stmt.bindString(10, cityKey);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(11, cityName);
        }
 
        String areaKey = entity.getAreaKey();
        if (areaKey != null) {
            stmt.bindString(12, areaKey);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(13, areaName);
        }
 
        String annotation = entity.getAnnotation();
        if (annotation != null) {
            stmt.bindString(14, annotation);
        }
 
        Boolean deliveryValid = entity.getDeliveryValid();
        if (deliveryValid != null) {
            stmt.bindLong(15, deliveryValid ? 1L: 0L);
        }
 
        Boolean deleteStatus = entity.getDeleteStatus();
        if (deleteStatus != null) {
            stmt.bindLong(16, deleteStatus ? 1L: 0L);
        }
 
        Boolean activeStatus = entity.getActiveStatus();
        if (activeStatus != null) {
            stmt.bindLong(17, activeStatus ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserAddress readEntity(Cursor cursor, int offset) {
        UserAddress entity = new UserAddress( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userAddressKey
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // defaultStatus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // companyName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // flatNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // locationName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // postalCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // landmark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deliveryInstrutions
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cityKey
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cityName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // areaKey
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // areaName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // annotation
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // deliveryValid
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // deleteStatus
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0 // activeStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserAddress entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserAddressKey(cursor.getString(offset + 1));
        entity.setDefaultStatus(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setCompanyName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFlatNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocationName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPostalCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLandmark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeliveryInstrutions(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCityKey(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCityName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAreaKey(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAreaName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAnnotation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDeliveryValid(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setDeleteStatus(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setActiveStatus(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserAddress entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserAddress entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
