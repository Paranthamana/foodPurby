package com.foodpurby.ondbstorage;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INGREDIENTS_CATEGORY".
*/
public class IngredientsCategoryDao extends AbstractDao<IngredientsCategory, Long> {

    public static final String TABLENAME = "INGREDIENTS_CATEGORY";

    /**
     * Properties of entity IngredientsCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IngredientsCategoryKey = new Property(1, String.class, "ingredientsCategoryKey", false, "INGREDIENTS_CATEGORY_KEY");
        public final static Property RestaurantBranchKey = new Property(2, String.class, "restaurantBranchKey", false, "RESTAURANT_BRANCH_KEY");
        public final static Property ProductKey = new Property(3, String.class, "productKey", false, "PRODUCT_KEY");
        public final static Property IngredientsCategoryName = new Property(4, String.class, "ingredientsCategoryName", false, "INGREDIENTS_CATEGORY_NAME");
        public final static Property MinSelection = new Property(5, Integer.class, "minSelection", false, "MIN_SELECTION");
        public final static Property MaxSelection = new Property(6, Integer.class, "maxSelection", false, "MAX_SELECTION");
        public final static Property RequiredSelection = new Property(7, Integer.class, "requiredSelection", false, "REQUIRED_SELECTION");
        public final static Property MandatoryStatus = new Property(8, Boolean.class, "mandatoryStatus", false, "MANDATORY_STATUS");
        public final static Property MultiSelectStatus = new Property(9, Boolean.class, "multiSelectStatus", false, "MULTI_SELECT_STATUS");
        public final static Property Price = new Property(10, Double.class, "price", false, "PRICE");
        public final static Property SortingNumber = new Property(11, Integer.class, "sortingNumber", false, "SORTING_NUMBER");
        public final static Property ActiveStatus = new Property(12, Boolean.class, "activeStatus", false, "ACTIVE_STATUS");
    };


    public IngredientsCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public IngredientsCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INGREDIENTS_CATEGORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"INGREDIENTS_CATEGORY_KEY\" TEXT NOT NULL ," + // 1: ingredientsCategoryKey
                "\"RESTAURANT_BRANCH_KEY\" TEXT," + // 2: restaurantBranchKey
                "\"PRODUCT_KEY\" TEXT," + // 3: productKey
                "\"INGREDIENTS_CATEGORY_NAME\" TEXT," + // 4: ingredientsCategoryName
                "\"MIN_SELECTION\" INTEGER," + // 5: minSelection
                "\"MAX_SELECTION\" INTEGER," + // 6: maxSelection
                "\"REQUIRED_SELECTION\" INTEGER," + // 7: requiredSelection
                "\"MANDATORY_STATUS\" INTEGER," + // 8: mandatoryStatus
                "\"MULTI_SELECT_STATUS\" INTEGER," + // 9: multiSelectStatus
                "\"PRICE\" REAL," + // 10: price
                "\"SORTING_NUMBER\" INTEGER," + // 11: sortingNumber
                "\"ACTIVE_STATUS\" INTEGER);"); // 12: activeStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INGREDIENTS_CATEGORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IngredientsCategory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIngredientsCategoryKey());
 
        String restaurantBranchKey = entity.getRestaurantBranchKey();
        if (restaurantBranchKey != null) {
            stmt.bindString(3, restaurantBranchKey);
        }
 
        String productKey = entity.getProductKey();
        if (productKey != null) {
            stmt.bindString(4, productKey);
        }
 
        String ingredientsCategoryName = entity.getIngredientsCategoryName();
        if (ingredientsCategoryName != null) {
            stmt.bindString(5, ingredientsCategoryName);
        }
 
        Integer minSelection = entity.getMinSelection();
        if (minSelection != null) {
            stmt.bindLong(6, minSelection);
        }
 
        Integer maxSelection = entity.getMaxSelection();
        if (maxSelection != null) {
            stmt.bindLong(7, maxSelection);
        }
 
        Integer requiredSelection = entity.getRequiredSelection();
        if (requiredSelection != null) {
            stmt.bindLong(8, requiredSelection);
        }
 
        Boolean mandatoryStatus = entity.getMandatoryStatus();
        if (mandatoryStatus != null) {
            stmt.bindLong(9, mandatoryStatus ? 1L: 0L);
        }
 
        Boolean multiSelectStatus = entity.getMultiSelectStatus();
        if (multiSelectStatus != null) {
            stmt.bindLong(10, multiSelectStatus ? 1L: 0L);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(11, price);
        }
 
        Integer sortingNumber = entity.getSortingNumber();
        if (sortingNumber != null) {
            stmt.bindLong(12, sortingNumber);
        }
 
        Boolean activeStatus = entity.getActiveStatus();
        if (activeStatus != null) {
            stmt.bindLong(13, activeStatus ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IngredientsCategory readEntity(Cursor cursor, int offset) {
        IngredientsCategory entity = new IngredientsCategory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // ingredientsCategoryKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // restaurantBranchKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ingredientsCategoryName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // minSelection
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // maxSelection
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // requiredSelection
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // mandatoryStatus
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // multiSelectStatus
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // price
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // sortingNumber
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0 // activeStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IngredientsCategory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIngredientsCategoryKey(cursor.getString(offset + 1));
        entity.setRestaurantBranchKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIngredientsCategoryName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMinSelection(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMaxSelection(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRequiredSelection(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMandatoryStatus(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setMultiSelectStatus(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setPrice(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setSortingNumber(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setActiveStatus(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IngredientsCategory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IngredientsCategory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
